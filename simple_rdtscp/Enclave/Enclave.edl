/*
 * Created by jhsong on 18. 1. 27.
*/

enclave {
	
	//from "sgx_tstdc.edl" import sgx_oc_cpuidex;
	
    trusted
    {
        /* define ECALLs here. */
        public void ecall_print([in, string]const char* str);
        public void ecall_print_trace([in, string]const char* str);
        public int ecall_lazy_syscall([in]const int* no);
        
        public void ecall_setup_var([in]size_t* size);
        public void ecall_reset_int_tmp(void);
        public void ecall_reset_char_tmp([in]size_t* size);
        public void ecall_free_var(void);
        
        public void ecall_in_rdtscp([in]int* var);
        public void ecall_out_rdtscp([out]int* var);
        public void ecall_inout_rdtscp([in,out]int* var);
        public void ecall_ocall_in_rdtscp([in]int* var);
        public void ecall_ocall_out_rdtscp([in]int* var);
        public void ecall_ocall_inout_rdtscp([in]int* var);
        public void ecall_ocall_in_rdtscp_dummy([in]int* var);
        public void ecall_ocall_out_rdtscp_dummy([in]int* var);
        public void ecall_ocall_inout_rdtscp_dummy([in]int* var);
         
        public void ecall_in_pass_rdtscp([in,size=len]char* var, size_t len);
        public void ecall_out_pass_rdtscp([out,size=len]char* var, size_t len);
        public void ecall_inout_pass_rdtscp([in,out,size=len]char* var, size_t len);
        public void ecall_ocall_in_pass_rdtscp([in]int* var);
        public void ecall_ocall_out_pass_rdtscp([in]int* var);
        public void ecall_ocall_inout_pass_rdtscp([in]int* var);
        public void ecall_ocall_in_pass_rdtscp_dummy([in]int* var);
        public void ecall_ocall_out_pass_rdtscp_dummy([in]int* var);
        public void ecall_ocall_inout_pass_rdtscp_dummy([in]int* var);
        
        public void ecall_in_set_rdtscp([in,size=len]char* var, size_t len);
        public void ecall_out_set_rdtscp([out,size=len]char* var, size_t len);
        public void ecall_inout_set_rdtscp([in,out,size=len]char* var, size_t len);
        public void ecall_ocall_in_set_rdtscp([in]int* var);
        public void ecall_ocall_out_set_rdtscp([in]int* var);
        public void ecall_ocall_inout_set_rdtscp([in]int* var);
        public void ecall_ocall_in_set_rdtscp_dummy([in]int* var);
        public void ecall_ocall_out_set_rdtscp_dummy([in]int* var);
        public void ecall_ocall_inout_set_rdtscp_dummy([in]int* var);
        
        public void ecall_in_cp_rdtscp([in,size=len]char* var, size_t len);
        public void ecall_out_cp_rdtscp([out,size=len]char* var, size_t len);
        public void ecall_inout_cp_rdtscp([in,out,size=len]char* var, size_t len);
        public void ecall_ocall_in_cp_rdtscp([in]int* var);
        public void ecall_ocall_out_cp_rdtscp([in]int* var);
        public void ecall_ocall_inout_cp_rdtscp([in]int* var);
        public void ecall_ocall_in_cp_rdtscp_dummy([in]int* var);
        public void ecall_ocall_out_cp_rdtscp_dummy([in]int* var);
        public void ecall_ocall_inout_cp_rdtscp_dummy([in]int* var);
    };

    untrusted
    {
        /* define OCALLs here. */
        void ocall_print([in, string]const char* str);
        void ocall_print_trace([in,string]const char* str);
        int ocall_lazy_syscall([in]const int *no);
        
        void ocall_in_rdtscp([in]int* var);
        void ocall_out_rdtscp([out]int* var);
        void ocall_inout_rdtscp([in,out]int* var);
        
        void ocall_in_pass_rdtscp([in,size=len]char* var, size_t len);
        void ocall_out_pass_rdtscp([out,size=len]char* var, size_t len);
        void ocall_inout_pass_rdtscp([in,out,size=len]char* var, size_t len);
        
        void ocall_in_set_rdtscp([in,size=len]char* var, size_t len);
        void ocall_out_set_rdtscp([out,size=len]char* var, size_t len);
        void ocall_inout_set_rdtscp([in,out,size=len]char* var, size_t len);
        
        void ocall_in_cp_rdtscp([in,size=len]char* var, size_t len);
        void ocall_out_cp_rdtscp([out,size=len]char* var, size_t len);
        void ocall_inout_cp_rdtscp([in,out,size=len]char* var, size_t len);
    };
};
